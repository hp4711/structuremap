<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html xmlns:o>
	<head>
		<title>StructureMap - Injected Singleton</title>
		<link rel="stylesheet" type="text/css" href="style.css">
		<meta name="GENERATOR" content="Microsoft Visual Studio .NET 7.1">
		<meta name="vs_targetSchema" content="http://schemas.microsoft.com/intellisense/ie5">
	</head>
	<body>
		<TABLE cellSpacing="5" cellPadding="0" width="100%" border="0" height="100%">
			<TR>
				<TD valign="top" width="210" class="form">
					<p align="center">
						<A href="http://sourceforge.net"><IMG src="http://sourceforge.net/sflogo.php?group_id=104740&amp;type=5" width="210" height="62"
								border="0" alt="SourceForge.net Logo"></A>
					</p>
					<P style="LINE-HEIGHT: 25px">
						<A href="default.htm">Home</A><BR>
						<a href="http://sourceforge.net/projects/structuremap">StructureMap on SourceForge</a><br>
						<A href="Basic Architecture.htm">Basic Architecture</A><BR>
						<A href="Concepts.htm">Concepts</A><BR>
						<A href="StructureMap-API.chm">API Documentation</A><BR>
						<A href="FAQ.htm">FAQ</A><BR>
						<A href="Configuration.htm">Configuration Schema</A><BR>
						&nbsp;&nbsp;&nbsp; <a href="MementoSources.htm">Memento Sources</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="NodeNormalized.htm">Node Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="AttributeNormalized.htm">Attribute 
						Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Attributes.htm">Attribute Usage</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Scoping.htm">Instance Lifecyle Scoping</a><BR>
						
						<A href="ConfigurationManagement.htm">Configuration Management</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapDoctor.htm">StructureMapDoctor</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapExplorer.htm">StructureMapExplorer</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.deployment.htm">deployment Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.verification.htm">verification Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="ValidationAttribute.htm">ValidationMethod Attribute</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="NAnt Tasks.htm">Other NAnt Tasks</A><BR>

						
						<A href="Troubleshooting.htm">Troubleshooting</A><BR>
						<A href="SingletonInjection.htm">Singleton Injection</A></P>

				</TD>
				<TD valign="top" style="PADDING-LEFT: 25px">
					<h1>Injected Singleton</h1>
					<P>StructureMap now provides an optional&nbsp;mechanism to create 
						and&nbsp;return&nbsp;a single instance per instance configuration as an 
						alternative to the Singleton pattern I am calling an "Injected 
						Singleton."&nbsp;&nbsp;A&nbsp;<EM><A href="Basic Architecture.htm#PluginFamily">PluginFamily</A>&nbsp;</EM>can 
						now&nbsp;be configured to&nbsp;create only one instance for each named 
						instance.&nbsp;</P>
					<h3>Singleton Design Pattern</h3>
					<p><i>Ensure a class only has one instance, and provide a global point of access to it.</i></p>
					<P>The Singleton pattern from the "Gang of Four" book&nbsp;is undeniably an 
						essential part of any developer's toolbox.&nbsp; The motivation for&nbsp;using 
						a Singleton&nbsp;is to&nbsp;insure that only one instance&nbsp;of a 
						class&nbsp;is created within the application.&nbsp;&nbsp; Mechanically, this is 
						accomplished by making a&nbsp;public class with only private 
						constructors.&nbsp;&nbsp;The class will create and store one instance in 
						a&nbsp;static field.&nbsp; Other classes can attain a reference to the single 
						instance by calling a&nbsp;static method on the singleton class.&nbsp; Below is 
						an example Singleton.</P>
					<div class="code-sample">
						<pre>
public class SingletonExample
{
	private static SingletonExample _instance = new SingletonExample();

	public static SingletonExample Instance
	{
		get
		{
			return _instance;	
		}
	}


	private int _count;

	private SingletonExample()
	{
	}

	public void Increment()
	{
		_count++;
	}

	public int Count
	{
		get { return _count; }
	}
}

public class Transactor
{
	public Transactor(){}

	public void DoSomething()
	{
		SingletonExample.Instance.Increment();
		/*  Do stuff */
	}
}
					</pre>
					</div>
					<H3>Usages</H3>
					<p>While the Singleton pattern is probably overused, here&nbsp;are some scenarios 
						where a Singleton or equivalent&nbsp;is valuable.</p>
					<ol>
						<li>
						Caching or object pooling. A Singleton is one of the simplest mechanisms to 
						create a caching mechanism inside your application.&nbsp;
						<LI>
							Easy access to an object instance.&nbsp; In .NET applications security identity 
							and security permissions are usually stored in an IPrincipal/IIdentity object 
							pair attached to an AppDomain and/or the executing Thread.&nbsp; By making the 
							IPrincipal a member of the Thread object, the IPrincipal can be accessed from 
							any object without explicitly passing around a reference to the 
							IPrincipal.&nbsp; The <A href="Basic Architecture.htm#ObjectFactory">ObjectFactory</A>&nbsp;class 
						in StructureMap is essentially a Singleton-like instance for quick reference to 
						StructureMap services without the overhead of&nbsp;creating and passing a 
						container object between classes.
						<LI>
							Using a Singleton as a single point of object construction to control a 
							plugin.&nbsp; For example, in a Smart Client WinForms application, 
							this&nbsp;creates the ability to switch an application from a connected mode to 
							a disconnected mode to a stubbed mode.&nbsp; StructureMap's <A href="Basic Architecture.htm#ObjectFactory">
								ObjectFactory</A> fulfils this role.</LI>
					</ol>
					<H3>Unit Testing with a Singleton</H3>
					<p>The primary&nbsp;downfall of a Singleton is&nbsp;a negative impact on automated 
						unit testing.&nbsp;&nbsp;Test Driven Development with automated unit tests is 
						most effective when unit tests are&nbsp;small, isolated, and running with known 
						boundary conditions.&nbsp; Since a Singleton class is responsible for creating 
						its single instance, a Singleton may often be in some sort of "dirty" 
						state&nbsp;during later unit test runs.&nbsp; The unit test is no 
						longer&nbsp;contained within known boundary conditions.&nbsp; The unit test 
						might give false&nbsp;results.&nbsp; This problem can be overcome by providing 
						some sort of "Reset()" method on the Singleton to clear the state prior to 
						running a unit test.
					</p>
					<P>The worst, most tightly coupled unit tests I have ever&nbsp;written,&nbsp;mocked 
						the underlying dependencies of&nbsp;a Singleton&nbsp;class to&nbsp;measure the 
						interaction of an MVC controller class with a Singleton repository.&nbsp; 
						The&nbsp;test class&nbsp;for the controller&nbsp;was tightly&nbsp;coupled to 
						the internal workings of the repository class.&nbsp;&nbsp;In this case it would 
						be vastly more effective and understandable to mock the repository 
						instead.&nbsp; This was not possible because the repository class was&nbsp;only 
						accessable as a&nbsp;Singleton&nbsp;instance.Since the only way to get an 
						object instance of the&nbsp;repository&nbsp;was to call the class itself, 
						there&nbsp;was no easy&nbsp;way to&nbsp;substitute a <A href="Concepts.htm#_Mock_Object">
							Mock</A> object in a unit test to establish a known boundary condition.</P>
					<P>This problem can be eliminated by making all dependencies be on an abstracted 
						interface and using <A href="Concepts.htm#DI">Dependency Injection</A> to 
						attach the shared instance instead of referencing the Singleton directly.</P>
					<P>For more information, try&nbsp;here:&nbsp; <A href="http://c2.com/cgi/wiki?SingletonsAreEvil">
							Singletons are Evil</A>.</P>
					<H3>Singleton with StructureMap</H3>
					<p>StructureMap can be configured to create a shared instance to accomplish the 
						same goals as a Singleton, while still allowing for polymorphic substitutions 
						of the dependency.&nbsp; The following example shows&nbsp;the usage of Injected 
						Singleton in StructureMap with a modification of the previous code sample.</p>
					<div class="code-sample">
						<pre>
	[PluginFamily("Concrete", IsSingleton = true)]
	public interface ISingleton
	{
		void Increment();
		int Count {get;}
	}

	[Pluggable("Concrete")]
	public class ConcreteSingleton : ISingleton
	{
		private int _count = 0;		

		public void Increment()
		{
			_count++;
		}

		public int Count
		{
			get { return _count; }
		}
	}

	public class Transactor
	{
		public Transactor(){}

		public void DoSomething()
		{
			ISingleton singleton = (ISingleton) ObjectFactory.GetInstance(typeof(ISingleton));
			/*  Do stuff */
		}
	}

						</pre>
					</div>
					<p>A few points about the code sample:</p>
					<OL>
						<LI>
						I extracted an interface for the Singleton class
						<LI>
							The <EM>ISingleton</EM> interface is marked with the [PluginFamily] attribute 
							with the optional property <EM>IsSingleton</EM>
						set to true.&nbsp; This directs StructureMap to intercept requests for any 
						ISingleton instance and return the single shared instance.
						<LI>
							The <EM>Transactor</EM> class retrieves an <EM>ISingleton</EM> from <EM>ObjectFactory</EM>
							just like any other plugin type controlled by StructureMap.</LI></OL>
					<P>An NUnit tester class like the following can now use the <A href="FAQ.htm#FAQ14">Mock 
							Injection</A> feature of StructureMap to substitute a mocked ISingleton 
						inside of a unit test.&nbsp;</P>
					<div class="code-sample">
						<pre>
[TestFixture]
public class TransactorTester
{
	IMock _singletonMock;

	[SetUp]
	public void SetUp()
	{
		_singletonMock = ObjectFactory.Mock(typeof(ISingleton));
	}

	[TearDown]
	public void TearDown()
	{
		ObjectFactory.ResetDefaults();
	}

	[Test]
	public void Test1()
	{
		_singletonMock.ExpectCall("DoSomething");
		
		Transactor transactor = new Transactor();
		transactor.DoSomething();
	
		_singletonMock.Verify();
	}
}

						</pre>
					</div>
					<p>
						A PluginFamily can also be explicitly configured to be an Injected Singleton in 
						the StructureMap.config file like the following xml.&nbsp; The 
						&lt;Interceptors&gt; node instructs StructureMap to make the PluginFamily an 
						injected singleton.&nbsp;
					</p>
					<div class="code-sample">
						<pre>
<P class="MsoNormal" style="mso-layout-grid-align: none"><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">&lt;</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: maroon; FONT-FAMILY: 'Courier New'">PluginFamily</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: fuchsia; FONT-FAMILY: 'Courier New'"> </SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: red; FONT-FAMILY: 'Courier New'">Type</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">="StructureMap.Testing.Widget.Rule"</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: fuchsia; FONT-FAMILY: 'Courier New'"> </SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: red; FONT-FAMILY: 'Courier New'">Assembly</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">="StructureMap.Testing.Widget"</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: fuchsia; FONT-FAMILY: 'Courier New'"> </SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: red; FONT-FAMILY: 'Courier New'">DefaultKey</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">="Blue"&gt;
<o:p></o:p></SPAN></P><P class="MsoNormal" style="mso-layout-grid-align: none"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">Interceptors</SPAN><SPAN style="COLOR: blue">&gt;
<o:p></o:p></SPAN></SPAN></P><P class="MsoNormal" style="mso-layout-grid-align: none"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">Interceptor</SPAN><SPAN style="COLOR: fuchsia"> </SPAN><SPAN style="COLOR: red">Type</SPAN><SPAN style="COLOR: blue">="Singleton"&gt;&lt;/</SPAN><SPAN style="COLOR: maroon">Interceptor</SPAN><SPAN style="COLOR: blue">&gt;
<o:p></o:p></SPAN></SPAN></P><P class="MsoNormal" style="mso-layout-grid-align: none"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: maroon">Interceptors</SPAN><SPAN style="COLOR: blue">&gt;
<o:p></o:p></SPAN></SPAN></P><P class="MsoNormal" style="mso-layout-grid-align: none"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>
<o:p></o:p></SPAN></P><P class="MsoNormal"><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">&lt;/</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: maroon; FONT-FAMILY: 'Courier New'">PluginFamily</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: blue; FONT-FAMILY: 'Courier New'">&gt;</SPAN></P>
						</pre>
					</div>
				</TD>
			</TR>
		</TABLE>
	</body>
</html>
