<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>StructureMap - Configuration Management</title><LINK href="style.css" type="text/css" rel="stylesheet">
		<meta content="Microsoft Visual Studio .NET 7.1" name="GENERATOR">
		<meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
	</head>
	<body>
		<TABLE height="100%" cellSpacing="5" cellPadding="0" width="100%" border="0">
			<TR>
				<TD class="form" vAlign="top" width="210">
					<p align="center"><A href="http://sourceforge.net"><IMG height="62" alt="SourceForge.net Logo" src="http://sourceforge.net/sflogo.php?group_id=104740&amp;type=5"
								width="210" border="0"></A>
					</p>
					<P style="LINE-HEIGHT: 25px">
						<A href="default.htm">Home</A><BR>
						<a href="http://sourceforge.net/projects/structuremap">StructureMap on SourceForge</a><br>
						<A href="Basic Architecture.htm">Basic Architecture</A><BR>
						<A href="Concepts.htm">Concepts</A><BR>
						<A href="StructureMap-API.chm">API Documentation</A><BR>
						<A href="FAQ.htm">FAQ</A><BR>
						<A href="Configuration.htm">Configuration Schema</A><BR>
						&nbsp;&nbsp;&nbsp; <a href="MementoSources.htm">Memento Sources</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="NodeNormalized.htm">Node Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="AttributeNormalized.htm">Attribute 
						Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Attributes.htm">Attribute Usage</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Scoping.htm">Instance Lifecyle Scoping</a><BR>
						
						<A href="ConfigurationManagement.htm">Configuration Management</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapDoctor.htm">StructureMapDoctor</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapExplorer.htm">StructureMapExplorer</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.deployment.htm">deployment Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.verification.htm">verification Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="ValidationAttribute.htm">ValidationMethod Attribute</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="NAnt Tasks.htm">Other NAnt Tasks</A><BR>

						
						<A href="Troubleshooting.htm">Troubleshooting</A><BR>
						<A href="SingletonInjection.htm">Singleton Injection</A></P>

				</TD>
				<TD style="PADDING-LEFT: 25px" vAlign="top">
					<h1>Configuration Management</h1>
					<P>Almost every nontrivial software system requires some sort of configuration 
						information stored outside of the compiled code in a mutable format.&nbsp; An 
						application in development is almost always running in multiple environments, 
						i.e. development, testing, build, or production servers.&nbsp; We generally 
						need the ability to “point” an application at different databases, web 
						services, or file paths based on environment.&nbsp;</P>
					<P>Hard coding this type of information into the code base itself is just not 
						feasible.&nbsp; I was briefly involved with a mission critical application at a 
						Fortune 500 company that put a database connection string into a constant field 
						in all the database access classes.&nbsp; Prior to promoting the code to the 
						testing or production environment a developer would manually change the 
						connection string to the proper database and re-compile the code.&nbsp; Guess 
						what happened when new team members forgot to make the change?</P>
					<h3>Configuration with StructureMap</h3>
					<P>A side-effect of Dependency Injection with StructureMap is that configuration 
						properties are pushed into objects instead of the objects pulling information 
						from an external file. This crucial difference creates two beneficial 
						results.<![if !supportLists]><![endif]></P>
					<OL>
						<LI>
							<P>The “configurable” classes in the application are completely decoupled from any 
								external configuration.&nbsp; Instead of classes pulling configuration 
								information directly, StructureMap&nbsp;"pushes" in configuration through 
								constructor arguments and setter properties.&nbsp; Unit testing is easier 
								because object instances can be constructed without an external 
								configuration&nbsp;file, and tested more quickly&nbsp;with multiple values.</P>
						<LI>
							<P>The configuration is now tied to arguments to constructor functions on CLR Types 
								(setter injection will be supported in a future release).&nbsp; The 
								configuration can now be compared automatically to real CLR Type’s and 
								validated with reflection.</P>
						</LI>
					</OL>
					<p>Besides being a Dependency Injection framework, StructureMap is now an improved, 
						fully object-oriented mechanism for application configuration.&nbsp; New in 
						version 0.90 is a pair of custom NAnt tasks to validate configuration at “build 
						time” and to deploy subsets or profiles of a master StructureMap.config file 
						(StructureMap will support MSBuild when it is released).&nbsp; StructureMap can 
						also diagnose configuration problems from a command line or in the build with 
						an error code that can be cross-referenced with the <A href="Troubleshooting.htm">TroubleShooting</A>
						guide.&nbsp; It is even possible to decorate methods in a class to direct 
						StructureMap to call one or more methods during verification to test runtime 
						functions like database connectivity and web service 
						availability.&nbsp;&nbsp;The goal of this new&nbsp;function is to detect 
						configuration problems automatically&nbsp;in much the same way that a compiler 
						finds syntax problems and&nbsp;unit tests 
						catch&nbsp;errors.&nbsp;&nbsp;StructureMap can improve a&nbsp;Continuous 
						Integration infrastructure to&nbsp;facilitate dependable, rapid cycling 
						between&nbsp;coding, testing, and deployment.&nbsp;&nbsp;&nbsp;
					</p>
					<p>The <A href="Basic Architecture.htm#MementoSource">MementoSource</A> abstract 
						class in StructureMap provides a “plugin” pattern for external sources of 
						configuration.&nbsp; This point of flexibility was intended to allow for 
						storing configuration in central sources like Active Directory, databases, or 
						for special encrypted configuration.&nbsp; Users can create new MementoSource 
						implementations and plug them into StructureMap.</p>
					<h3>Continuous Integration</h3>
					<p class="MsoNormal">StructureMap was originally built for usage on a heavy client 
						application backed by web services on an application server and a 
						relational&nbsp;database on the backend.&nbsp; The development&nbsp;team 
						utilized both Test Driven Development and Continous Integration to support a 
						rapid iterative process largely based on Extreme Programming.&nbsp; The 
						application ran in basically three different configurations.</p>
					<OL>
						<li>
						Development workstations. In development, the web services running on&nbsp;IIS 
						and the client side code both ran on a developer workstation. The client points 
						to “localhost” for all web service calls. In order to work efficiently and 
						avoid database conflicts, each development workstation connected to a different 
						development database schema. It is a luxury, but having isolated database 
						schema’s for each developer and environment can drastically improve a team’s 
						ability to run automated tests. From painful experience, watching the automated 
						build breaking over and over again because someone else is editing the database 
						at the same time is excruciating.
						<li>
							Build server. The <a href="http://www.martinfowler.com/articles/continuousIntegration.html">
								Continuous Integration</a> server (<a href="http://ccnet.thoughtworks.com">CruiseControl.Net</a>
							&amp; <a href="http://nant.sourceforge.net/">NAnt</a>) also ran the entire 
						application on one server, including client testing. The application ran on the 
						“BUILD” database.&nbsp;&nbsp;The build server also ran a suite of automated 
						user interface tests that used a slightly different configuration 
						to&nbsp;replace the web service calls with a direct call to the server 
						components.&nbsp; This was done to optimize the run times of the 
						tests.&nbsp;&nbsp;
						<li>
							Test server. An output of the automated build was a packaged deployment that 
							could be automatically pushed and installed to the test server. The client 
							configuration had to point to the web services on the test server. The test 
							server itself used the “TEST” database schema.&nbsp; A similar 
							dedicated&nbsp;configuration was also&nbsp;created for demonstration purposes 
							for analysts and the customer.&nbsp;</li></OL>
					<IMG src="images/CI.jpg">
					<h3>Challenges</h3>
					<p>The validation and troubleshooting improvements in StructureMap are largely a 
						reaction to the difficulties and lessons learned&nbsp;from the development 
						process described above.</p>
					<P>
						Application code cannot function correctly without the correct configuration, 
						but errors in configuration cannot be found automatically by the compiler and 
						probably will not be found by automated unit tests in the build.&nbsp; Runtime 
						errors often&nbsp;ocurred when a configuration setting was created or 
						changed.&nbsp;&nbsp;</P>
					<P>Multiple versions of configuration settings must be maintained <B>and</B> deployed 
						correctly for different environments and possibly even different developer 
						workstations.&nbsp; Problems can proliferate when a new or 
						modified&nbsp;configuration key or section is not propagated to all possible 
						configuration files.&nbsp; The typical “but it works on my box” situation is 
						often a result of invalid configuration in the testing environment.&nbsp; A 
						common problem on the original project was the occasional tester client trying 
						to connect to nonexistent services on “localhost.”&nbsp; The development team 
						lost time&nbsp;troubleshooting the testing environment.&nbsp;&nbsp;The&nbsp;<A href="structuremap.verification.htm">structuremap.verification</A>
						NAnt step was created specifically to validate and diagnose&nbsp;a&nbsp;testing 
						(or any other)&nbsp;environment before the testing team used a new 
						build.&nbsp;&nbsp;Using the validation step within a Continuous Integration 
						build can help spot configuration issues early.&nbsp;</P>
					<P>The <A href="structuremap.deployment.htm">structuremap.deployment</A> task was 
						created to reduce the overhead of managing multiple configuration files.&nbsp; 
						&nbsp;By centralizing all configuration profiles into one file it became easier 
						to manage multiple configuration sets.&nbsp; If a new plugin type was added to 
						the system, only one file needed to be changed.&nbsp; The build process would 
						replicate a subset of the master configuration file each profile and deployment 
						target ("client" or "server").&nbsp;&nbsp;</P>
					<P>A dependency on external configuration&nbsp;increases “friction” in automated 
						unit testing. Test Driven Development (TDD) and its close cousin Continuous 
						Integration (CI) succeed when coded classes are easily instantiated and can 
						function in relative isolation. Unit tests should also reveal the intent of the 
						code being tested as explicitly as possible. A class that pulls information 
						from a configuration file is harder to test because of the overhead of setting 
						up and copying testing configuration files around in post-build steps or 
						automated build files. In addition the unit test is less understandable because 
						it is pulling input data from a file external to the unit test. <B>Simply put, a 
							dependency on configuration of any kind will make TDD more difficult.</B>&nbsp;</P>
				</TD>
			</TR>
		</TABLE>
	</body>
</html>
