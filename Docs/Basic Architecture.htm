<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>StructureMap - Basic Architecture</title>
		<link rel="stylesheet" type="text/css" href="style.css">
		<meta name="GENERATOR" content="Microsoft Visual Studio .NET 7.1">
		<meta name="vs_targetSchema" content="http://schemas.microsoft.com/intellisense/ie5">
	</head>
	<body>
		<TABLE cellSpacing="5" cellPadding="0" width="100%" border="0" height="100%" ID="Table2">
			<TR>
				<TD valign="top" width="210" class="form">
					<p align="center">
						<A href="http://sourceforge.net"><IMG src="http://sourceforge.net/sflogo.php?group_id=104740&amp;type=5" width="210" height="62"
								border="0" alt="SourceForge.net Logo"></A>
					</p>
					<P style="LINE-HEIGHT: 25px">
						<A href="default.htm">Home</A><BR>
						<a href="http://sourceforge.net/projects/structuremap">StructureMap on SourceForge</a><br>
						<A href="Basic Architecture.htm">Basic Architecture</A><BR>
						<A href="Concepts.htm">Concepts</A><BR>
						<A href="StructureMap-API.chm">API Documentation</A><BR>
						<A href="FAQ.htm">FAQ</A><BR>
						<A href="Configuration.htm">Configuration Schema</A><BR>
						&nbsp;&nbsp;&nbsp; <a href="MementoSources.htm">Memento Sources</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="NodeNormalized.htm">Node Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="AttributeNormalized.htm">Attribute 
						Normalized Xml</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Attributes.htm">Attribute Usage</a><BR>
						&nbsp;&nbsp;&nbsp; <a href="Scoping.htm">Instance Lifecyle Scoping</a><BR>
						
						<A href="ConfigurationManagement.htm">Configuration Management</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapDoctor.htm">StructureMapDoctor</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="StructureMapExplorer.htm">StructureMapExplorer</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.deployment.htm">deployment Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="structuremap.verification.htm">verification Task</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="ValidationAttribute.htm">ValidationMethod Attribute</A><BR>
						&nbsp;&nbsp;&nbsp; <A href="NAnt Tasks.htm">Other NAnt Tasks</A><BR>

						
						<A href="Troubleshooting.htm">Troubleshooting</A><BR>
						<A href="SingletonInjection.htm">Singleton Injection</A></P>

				</TD>
				<TD valign="top" style="PADDING-LEFT: 25px">
					<h1>Basic Architecture</h1>
					<h3>Domain Model</h3>
					<P>
						<img src="images\DomainModel.gif">
					</P>
					<P>&nbsp;</P>
					<h3>Workflow</h3>
					<h4>Step 1.)&nbsp; Build a PluginGraph</h4>
					<P>At runtime, the first utilization of StructureMap triggers an initialization of 
						the internal structures for building classes.&nbsp; The first step is to find a 
						PluginGraph of all of the interfaces and classes that should be built by 
						StructureMap, and the relationships between concrete and abstract CLR 
						Types.&nbsp; For example,&nbsp;StructureMap may be directed to built types of 
						an interface called "IGateway."&nbsp; The concrete&nbsp;classes to plug into 
						"IGateway" could be "RemoteGateway", "StubbedGateway", and "LocalGateway" 
						(aliased in StructureMap as "Remote", "Stubbed", and "Local" 
						respectively).&nbsp;
					</P>
					<P>
						The construction of the PluginGraph is done by a helper class called <EM>PluginGraphBuilder</EM>.&nbsp; 
						PluginGraphBuilder first&nbsp;reads the StructureMap.config file in the 
						executing directory of the AppDomain.&nbsp; PluginGraphBuilder searches through 
						the xml in config file looking for assembly references, explicitly defined 
						PluginFamily's, and defined Plugin's.&nbsp; Finally the PluginGraph is 
						"sealed."&nbsp; When the PluginGraph is sealed it examines every exported CLR 
						Type in the assemblies referenced for types marked with StructureMap attributes 
						to add implicitly defined PluginFamily's and Plugin's.&nbsp; Any class marked 
						as Pluggable will be made a Plugin to&nbsp;any PluginFamily where it could fit.</P>
					<h4>Step 2.)&nbsp; Construct the InstanceManager Hierarchy</h4>
					<p>Once the PluginGraph is created, an InstanceManager hierarchy of objects is 
						created to perform the actual&nbsp;instantiation of the 
						targeted&nbsp;objects.&nbsp; The InstanceManager takes in the PluginGraph and 
						creates a new InstanceFactory object for each PluginFamily CLR Type.&nbsp; The 
						InstanceFactory has an optionally defined MementoSource member that is the 
						source for configuration information for that particular MementoSource.&nbsp; 
						By default, an InstanceFactory will get a MementoSource that retrieves XML 
						nodes from the StructureMap.config file.&nbsp; On instantiation, an 
						InstanceFactory will create a collection of InstanceBuilder objects for each 
						concrete CLR Type that plugs into the InstanceManager.PluginType member.&nbsp; 
						The InstanceBuilder classes are emitted into a new in-memory dynamic assembly.</p>
					<h4>Step 3.)&nbsp; Set the Default Instance Keys</h4>
					<P>The last step of instantiation is to determine the default configured instance 
						for each InstanceFactory/PluginFamily.&nbsp; In order of precedence, the 
						default instance key is determined by:</P>
					<OL>
						<LI>
						The overrides for a set profile, either at runtime or in the 
						StructureMap.config file
						<LI>
						Machine-level overrides set in the StructureMap.config file
						<LI>
							Explicitly definined defaults set in the individual <EM>&lt;PluginFamily&gt;</EM>
						elements in the StructureMap.config file
						<LI>
							An optional "DefaultKey"&nbsp;property on a <EM>[StructureMap.PluginFamily]</EM>
							attribute</LI></OL>
					<P>The default keys can be set or reset at runtime through ObjectFactory.</P>
					<h4>Step 4.)&nbsp; Retrieve an Instance</h4>
					<P>Whether creating the default instance or a named instance, the sequence is very 
						similar.&nbsp; A caller requests a certain Type of object from the 
						ObjectFactory.GetInstance() or ObjectFactory.GetNamedInstance() methods.&nbsp; 
						ObjectFactory delegates to its static InstanceManager member.&nbsp; 
						InstanceManager selects the proper InstanceFactory object based on the 
						requested Type.&nbsp; InstanceFactory uses either the default instance key or 
						the named instance key to find the matching InstanceMemento from its 
						MementoSource.&nbsp; Once InstanceFactory has the InstanceMemento, it 
						determines the correct InstanceBuilder by the <EM>ConcreteKey</EM> property of 
						the InstanceMemento.&nbsp; Finally, the selected InstanceBuilder object takes 
						the InstanceMemento object, reads the proper properties, and creates the 
						requested object and returns through the calling chain.</P>
					<P>&nbsp;</P>
					<h3>Domain Classes</h3>
					<h4><A name="PluginFamily"></A>PluginFamily</h4>
					<p>Conceptually speaking, a PluginFamily object represents a point of abstraction 
						or variability in the system.&nbsp; A PluginFamily defines a CLR Type that 
						StructureMap can build, and all of the possible Plugin’s implementing the CLR 
						Type.</p>
					<h4><A name="Plugin"></A>Plugin</h4>
					<p>Represents a concrete class that can be built by StructureMap as an instance of 
						the parent PluginFamily’s PluginType. The properties of a Plugin are the CLR 
						Type of the concrete class, and the human-friendly concrete key that 
						StructureMap will use to identify the Type.</p>
					<h4>PluginGraph</h4>
					<p>A PluginGraph models the entire listing of all PluginFamily’s and Plugin’s 
						controlled by StructureMap within the current AppDomain. The scope of the 
						PluginGraph is controlled by a combination of custom attributes and the 
						StructureMap.config class</p>
					<h4><A name="InstanceMemento"></A>InstanceMemento</h4>
					<p>A GoF Memento pattern class that represents a configuration of an object 
						instance that is available from StructureMap. An InstanceMemento can be thought 
						of as a <i>dehydrated</i> object</p>
					<h4><A name="MementoSource"></A>MementoSource</h4>
					<p>A mechanism for retrieving a named InstanceMemento. MementoSource is an 
						interface that can be plugged into StructureMap. An example of a MementoSource 
						is the XmlFileMementoSource class that retrieves InstanceMemento objects from 
						an Xml file. Users can create alternative MementoSource’s for usage with 
						StructureMap.</p>
					<h4>InstanceBuilder</h4>
					<p>An emitted class that can assemble and create an object instance from an 
						InstanceMemento. There is always one InstanceBuilder created for each Plugin.</p>
					<h4>InstanceFactory</h4>
					<p>Creates named and default object instances of a CLR type defined by the 
						PluginType property. An InstanceFactory object uses a MementoSource to find 
						InstanceMemento objects, and a collection of InstanceBuilder classes to build 
						each unique concrete type.</p>
					<h4>InstanceManager
					</h4>
					<p>A collection of InstanceFactory classes. Creates object instances of multiple 
						types. Helps individual InstanceBuilder classes create children instances</p>
					<h4><A name="ObjectFactory"></A>ObjectFactory</h4>
					<p>The Façade class for easy access to StructureMap functionality. Provides a 
						static wrapper to manage object lifetime of an InstanceManager class for the 
						current AppDomain.&nbsp; All normal usage of StructureMap is through this 
						class.&nbsp; It is, however,&nbsp;possible to reuse the other classes for 
						custom plugin scenarios.</p>
				</TD>
			</TR>
		</TABLE>
	</body>
</html>
